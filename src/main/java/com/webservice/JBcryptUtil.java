package com.webservice;

import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Random;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;

import org.apache.commons.codec.binary.Base64;
import org.mindrot.jbcrypt.BCrypt;
import org.w3c.dom.Document;

import com.bo.ResponseBO;
import com.exception.ValidationException;
import com.suresh.constants.Constants;


public class JBcryptUtil implements Constants
{
	private static final int WORKLOAD = 12;
	private static final String SALTCHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ123456789!@#%abcdefghijklmns";

	/**
	 * @param password_plaintext
	 * @param stored_hash
	 * @return
	 */
	public static boolean checkPassword(String password_plaintext, String stored_hash) {
		boolean password_verified = false;
		if (null == stored_hash || !stored_hash.startsWith("$2a$"))
			throw new java.lang.IllegalArgumentException("Invalid hash provided for comparison");
		password_verified = BCrypt.checkpw(password_plaintext, stored_hash);
		return password_verified;
	}

	/**
	 * @param plaintext
	 * @return
	 */
	public static String hashPassword(String plaintext) {
		String salt = BCrypt.gensalt(WORKLOAD);
		String hashed_password = BCrypt.hashpw(plaintext, salt);
		return hashed_password;
	}

	/**
	 * @param plainText
	 * @return
	 */
	public static String encodeBase64(String plaintextbase) {
		byte[] base_password = Base64.encodeBase64(plaintextbase.getBytes());
		return new String(base_password);
	}

	/**
	 * @param decodeText
	 * @return
	 */
	public static String decodeBase64(String decodeText) {
		byte[] bytesDecoded = Base64.decodeBase64(decodeText.getBytes());
		return new String(bytesDecoded);
	}

	public static String trimString(String str) {
		return str.trim();
	}

	/**
	 * @return
	 */
	//bgbAPiV#sBedsYRE  gA8l9#adm3VPNMKNU!aP
	public static String getAutoGeneratedPassword() {
		//RandomStringUtils.randomAlphanumeric(17).toUpperCase()
		StringBuilder salt = new StringBuilder();
		Random rnd = new Random();
		while (salt.length() < 16) {
			int index = (int) (rnd.nextFloat() * SALTCHARS.length());
			salt.append(SALTCHARS.charAt(index));
		}
		return salt.toString().trim();
	}
	//$2a$12$mxR.MrXrPyNQxP/atLxW2.EqRz39UjfmWrCzs7ssiXdUbLaPO6vOi pawantest1
	public static void main(String[] args) {
		//System.out.println(decodeBase64("c3VyZXNoOmdBOGw5I2FkbTNWUE5NS05VIWFQ"));
	}
	
	
	public static String findLatitude(String address)
	{

		  String latitude = null;
		  int responseCode =0;
		  try {
			  String api = "http://maps.googleapis.com/maps/api/geocode/xml?address=" + URLEncoder.encode(address, "UTF-8") + "&sensor=true";
			  URL url = new URL(api);
			  HttpURLConnection httpConnection = (HttpURLConnection) url.openConnection();
			  httpConnection.connect();
			  responseCode = httpConnection.getResponseCode();
			  if(responseCode == 200)
			  {
				  DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
				  Document document = builder.parse(httpConnection.getInputStream());
				  XPathFactory xPathFactory = XPathFactory.newInstance();
				  XPath xpath = xPathFactory.newXPath();
				  XPathExpression expr = xpath.compile("/GeocodeResponse/status");
				  String status = (String)expr.evaluate(document, XPathConstants.STRING);
				  
				  if(status.equals("OK"))
				  {
					  expr = xpath.compile("//geometry/location/lat");
					  latitude = (String)expr.evaluate(document, XPathConstants.STRING);
				  }
				  else if(status.equals("OVER_QUERY_LIMIT"))
				  {
				      Thread.sleep(1000);
				      return findLatitude(address);
				  }
				  
			  }
		} catch (Exception e) {
		}
		  return latitude;
	  }
	  
	  public static String findLongitude(String address)
	  {
		  String longitude = null;
		  int responseCode = 0;
		  try {
			  String api = "http://maps.googleapis.com/maps/api/geocode/xml?address=" + URLEncoder.encode(address, "UTF-8") + "&sensor=true";
			  URL url = new URL(api);
			  HttpURLConnection httpConnection = (HttpURLConnection) url.openConnection();
			  httpConnection.connect();
			  responseCode = httpConnection.getResponseCode();
			  
			  if(responseCode == 200)
			  {
				  DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
				  Document document = builder.parse(httpConnection.getInputStream());
				  XPathFactory xPathFactory = XPathFactory.newInstance();
				  XPath xpath = xPathFactory.newXPath();
				  XPathExpression expr = xpath.compile("/GeocodeResponse/status");
				  String status = (String)expr.evaluate(document, XPathConstants.STRING);
				  if(status.equals("OK"))
				  {
					  expr = xpath.compile("//geometry/location/lng");
					  longitude = (String)expr.evaluate(document, XPathConstants.STRING);
				  }
				  else if(status.equals("OVER_QUERY_LIMIT"))
				  {
				      Thread.sleep(1000);
				      return findLongitude(address);
				  }
			  }
		} catch (Exception e) {
		}
		  return longitude;
	  }
	  
	  public static boolean getHeaderparamStatus(String headParams)
		{
			LoggingUtil.writeApplicationLogs("Entry into getHeaderparamStatus() method", JBcryptUtil.class);
			boolean flag = false;
			ResponseBO responseBO = new ResponseBO();
			
			try
			{
				if(headParams == null || headParams.isEmpty())
				{
					flag = false;
					responseBO.setResponseCode(HEADER_KEY_EXCEPTION);
					responseBO.setResponseMsg(HEADER_VALIDATION_ERROR);
				}
				else 
				{
					LoggingUtil.writeApplicationLogs("HEADER_API_KEY LENGTH  " + headParams.length() , JBcryptUtil.class);
					if (HEADER_API_KEY.equalsIgnoreCase(headParams.trim())) 
					{
						flag = true;
					}
				}
			}
			catch(Exception e)
			{
				responseBO.setResponseCode(HEADER_KEY_EXCEPTION);
				responseBO.setResponseMsg(HEADER_VALIDATION_ERROR);
				LoggingUtil.writeApplicationLogs("Exception : " + flag, JBcryptUtil.class);
				throw new ValidationException(e.getMessage());
			}
			LoggingUtil.writeApplicationLogs("Exit from getHeaderparamStatus() method flag VALUE : " + flag, JBcryptUtil.class);
			return flag;
		}
}
